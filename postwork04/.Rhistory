host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest"
)
dbListTables(my_db)
my_db %>% tbl("Country") %>% head(5) # library(dplyr)
my_db %>% tbl("CountryLanguage") %>% head(5)
library(DBI)
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest")
rs <- dbSendQuery(conn, "SELECT * FROM City LIMIT 5;")
library(DBI)
my_db %>% tbl("CountryLanguage") %>% head(5)
library(DBI)
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest")
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest")
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest")
rs <- dbSendQuery(conn, "SELECT * FROM City LIMIT 5;")
dbFetch(rs)
dbClearResult(rs)
dbDisconnect(conn)
install.packages("rjson")   #Siempre usar comillas en el nombre del paquete
URL <- "https://tools.learningcontainer.com/sample-json-file.json" # Asignando el link a una variable
JsonData <- fromJSON(file= URL)     # Se guarda el JSon en un objeto de R
library(rjson)            # Quitar comillas del nombre
URL <- "https://tools.learningcontainer.com/sample-json-file.json" # Asignando el link a una variable
JsonData <- fromJSON(file= URL)     # Se guarda el JSon en un objeto de R
class(JsonData)                     # Vemos que tipo de objeto es JsonData
str(JsonData)                       # Vemos la naturaleza de sus variables
sqrt(JsonData$Mobile)
# install.packages("XML")
library(XML)
link <- "http://www-db.deis.unibo.it/courses/TW/DOCS/w3schools/xml/cd_catalog.xml"
# Analizando el XML desde la web
xmlfile <- xmlTreeParse(link)
summary(xmlfile)
head(xmlfile)
#Extraer los valores xml
topxml <- xmlSApply(xmlfile, function(x) xmlSApply(x, xmlValue))
# Colocandolos en un Data Frame
xml_df <- data.frame(t(topxml), row.names= NULL)
str(xml_df) # Observar la naturaleza de las variables del DF
xml_df$PRICE <- as.numeric(xml_df$PRICE)
xml_df$YEAR <- as.numeric(xml_df$YEAR)
mean(xml_df$PRICE)
mean(xml_df$YEAR)
data_df <- xmlToDataFrame(link)
head(data_df)
install.packages("rvest")
library(rvest)
theurl <- "https://solarviews.com/span/data2.htm"
file <- read_html(theurl)    # Leemos el html
tables <- html_nodes(file, "table")
table1 <- html_table(tables[4], fill = TRUE)
str(table)  # Vemos la naturaleza de las variables
table$Albedo <- as.numeric(table$Albedo)
str(table)
# Colocandolos en un Data Frame
xml_df <- data.frame(t(topxml), row.names= NULL)
# Colocandolos en un Data Frame
(xml_df <- data.frame(t(topxml), row.names= NULL)) #de la transpuesta
data_df <- xmlToDataFrame(link)
head(data_df)
url<- "https://www.glassdoor.com.mx/Sueldos/data-scientist-sueldo-SRCH_KO0,14.htm"
file<-read_html(theurl)
file<-read_html(url)
tables <- html_nodes(file, "table")
View(tables)
table2 <- html_table(tables[], fill = TRUE)
View(table2)
table2 <- html_table(tables[2], fill = TRUE)
View(table2)
(table1 <- as.data.frame(table1))
(table1 <- na.omit(table1))
names(table1)
table1 <- html_table(tables[1], fill = TRUE)
tables <- html_nodes(file, "table")
table1 <- html_table(tables[1], fill = TRUE)
(df <- as.data.frame(table1))
(df) <- na.omit(table1))
file<-read_html(url)
tables <- html_nodes(file, "table")
table1 <- html_table(tables[1], fill = TRUE)
(df <- as.data.frame(table1))
View(df)
names(table)
View(df)
# 2. Quitar caracteres innecesarios
?gsub
# 2. Quitar caracteres innecesarios
? gsub
clean <- gsub("MXN","",table$Sueldo)
View(clean)
table$sueldo <- gsub("MXN","",table$Sueldo)
clean <- gsub("MXN","",table$Sueldo)
a <- gsub("MXN","",table$Sueldo)
View(df)
gsub("MXN$","",table$Sueldo)
gsub("MXN$","",table$Sueldo, perl=T)
gsub("MXN$","",table$Sueldo, perl=T)
gsub("MXN$","",df$Sueldo, perl=T)
clean <- gsub("MXN$","",df$Sueldo, perl=T)
clean
clean <- gsub("MXN$","",df$Sueldo)
clean
clean <- gsub("MXN$","",df$Sueldo)
clean <- gsub("MXN$","",df$Sueldo)
clean <- gsub("[^[:alnum:][:blank:]?]", "", clean)
clean <- gsub("mes", "", clean)
clean <- as.numeric(clean)
table$Sueldo <- a
table$Sueldo <- clean
df$Sueldo <- clean
(df$Sueldo <- clean)
View(df)
table1 <- html_table(tables[1], fill = TRUE)
(df <- as.data.frame(table1))
clean <- gsub("MXN$","",df$Sueldo)
clean <- gsub("[^[:alnum:][:blank:]?]", "", clean)
clean <- gsub("mes", "", clean)
clean <- as.numeric(clean)
(df$Sueldo <- clean)
(df <- as.data.frame(table1))
clean <- gsub("MXN$","",df$Sueldo)
clean <- gsub("[^[:alnum:][:blank:]?]", "", clean)
clean <- gsub("mes", "", clean)
(df$Sueldo <- clean)
clean <- gsub("MXN","",df$Sueldo)
(df$Sueldo <- clean)
(df$Sueldo <- as.numeric(clean))
#Removiendo caracteres inncesarios
clean<- gsub("Sueldos para Data Scientist en ", "", table$Cargo)
#Removiendo caracteres inncesarios
clean<- gsub("Sueldos para Data Scientist en ", "", table$Cargo)
#Removiendo caracteres inncesarios
clean2 <- gsub("Sueldos para Data Scientist en ", "", table$Cargo)
View(df)
# ¿Quien paga mas?
max.value <-  which.max(df$Sueldo)
table[max.value,]
df[max.value,]
# ¿Quien paga menos?
min.value<- which.min(df$Sueldo)
df[min.value,]
file<-read_html(url)
tables <- html_nodes(file, "table")
table1 <- html_table(tables[1], fill = TRUE)
(df <- as.data.frame(table1))
View(df)
View(df)
clean <- gsub("MXN","",df$Sueldo)
clean <- gsub("$", "", clean)
clean <- gsub("mes", "", clean)
View(df)
# 3. Asignar la colimna como tipo numerico
(df$Sueldo <- as.numeric(clean))
# 3. Asignar la colimna como tipo numerico
(df$Sueldo <-clean)
clean <- gsub("$", "", clean)
# 3. Asignar la colimna como tipo numerico
(df$Sueldo <-clean)
clean <- gsub("/", "", clean)
# 3. Asignar la colimna como tipo numerico
(df$Sueldo <-clean)
clean <- gsub(",", "", clean)
# 3. Asignar la colimna como tipo numerico
(df$Sueldo <-clean)
clean <- gsub("\$", "", clean)
clean <- gsub("\\$", "", clean)
# 3. Asignar la colimna como tipo numerico
(df$Sueldo <-clean)
# 3. Asignar la colimna como tipo numerico
(df$Sueldo <-clean)
# ¿Quien paga mas?
max.value <-  which.max(df$Sueldo)
df[max.value,]
# ¿Quien paga menos?
min.value<- which.min(df$Sueldo)
df[min.value,]
(df <- as.data.frame(table1))
clean <-  gsub("/[MXN\\$*/mes]")
clean <-  gsub("/[MXN\\$*/mes]", "", df$sueldo)
# 3. Asignar la colimna como tipo numerico
(df$Sueldo <-clean)
clean <- gsub("MXN","",df$Sueldo)
clean <- gsub("mes", "", clean)
clean <- gsub("/", "", clean)
clean <- gsub(",", "", clean)
clean <- gsub("\\$", "", clean)
# 3. Asignar la colimna como tipo numerico
(df$Sueldo <-clean)
# ¿Quien paga mas?
max.value <-  which.max(df$Sueldo)
df[max.value,]
# ¿Quien paga menos?
min.value<- which.min(df$Sueldo)
df[min.value,]
# ¿Quien paga mas?
max.value <- max(df$Sueldo)
df[df$Sueldo == max.value]
df[df$Sueldo == max.value, ]
df[df$Sueldo == min.value, ]
# ¿Quien paga menos?
min.value<- min(df$Sueldo)
df[df$Sueldo == min.value, ]
setwd("C:\\Users\\luisf\\Github\\DS-Bedu-Equipo14-Postworks")
dir()
setwd("C:/Users/luisf/MEGA/Courses/DataScience/BEDU/Module02/01_IntroductionR/Postwork")
df <- read.csv("SP1.csv")
View(df)
names(df)
str(df)
head(df)
#2. Extrae los goles de los equipos en casa y visitantes
cbind.data.frame(df$FTHG, df$FTAG)
# 3. Calculo de probabilidades
? table # create a contingency table
df.tbl <- table(df$FTHG, df$FTAG) # contingency table ixj FTGHxFTAG
df.tbl
totalObs <- sum(rowSums(df.tbl))
# 3.1 (marginal) de que el equipo en casa anote x goles
df.tbl
df.tbl /totalObs
apply(df.tbl, 1, sum)
apply(df.tbl, 1, sum) /totalObs
sum(apply(df.tbl, 1, sum) /totalObs)
# 3.2 (marginal vistante)
apply(df.tbl, 2, sum) /totalObs
# 3.3 Probabilidades conjuntas
df.tbl / totalObs
## Set working directory
dir_houseA = paste(getwd(),"data/Aras/HouseA", sep='/')
setwd(dir_houseA)
## Set working directory
dir_houseA = paste(getwd(),"data/Aras/HouseA", sep='/')
setwd(dir_houseA)
## Importamos los datos a R
houseA.lista <- lapply(list.files(path=dir_houseA, pattern='^DAY'), read.csv, sep=' ')
length(houseA.lista)
dim(houseA.lista[[1]])
## Set working directory
dir_houseA = paste(getwd(),"~/data/Aras/HouseA", sep='/')
setwd(dir_houseA)
## Set working directory
dir_houseA = paste(getwd(),"~\\data\\Aras'\HouseA")
setwd(dir_houseA)
## Set working directory
dir_houseA = paste(getwd(),"C:\\Users\\luisf\\GitHub\\SmartHome-DataAnalytics\\data\\Aras\\HouseA")
setwd(dir_houseA)
## Set working directory
dir_houseA = paste(getwd(),"C:\\Users\\luisf\\GitHub\\SmartHome-DataAnalytics\\data\\Aras\\HouseA")
setwd(dir_houseA)
## Set working directory
dir_houseA = "C:\\Users\\luisf\\GitHub\\SmartHome-DataAnalytics\\data\\Aras\\HouseA"
setwd(dir_houseA)
## Importamos los datos a R
houseA.lista <- lapply(list.files(path=dir_houseA, pattern='^DAY'), read.csv, sep=' ')
length(houseA.lista)
dim(houseA.lista[[1]])
head(houseA.lista[[1]]); head(houseA.lista[[30]]);
## Joint list and create a data frame
houseA <- rbindlist(lapply(houseA.lista, rbind, use.names=FALSE))
houseA <- as.data.frame(houseA)
colnames(houseA) <- c(1:22)
dim(houseA)
houseA[1, ]
# Save dataframe
write.csv(houseA, file='houseA.csv', row.names=FALSE)
## Joint list and create a data frame
houseA <- rbindlist(lapply(houseA.lista, rbind, use.names=FALSE))
# Import libraries
suppressMessages(suppressWarnings(library(dplyr)))
library(data.table)
installed.packages("rbindlist")
## Joint list and create a data frame
houseB <- rbindlist(lapply(houseB.lista, rbind, use.names=FALSE))
length(houseA.lista)
dim(houseA.lista[[1]])
setwd("C:/Users/luisf/Github/DS-Bedu-Equipo14-Postworks/postwork04")
setwd("../postwork02")
df <- read.csv("postwork02.csv")
names(df)
View(df)
FTHG <- df$FTHG
FTAG <- df$FTAG
df.tbl <- table(FTHG, FTAG)
df.tbl
(totalObs <- sum(df.tbl))
# Joint probability for each pair of results
(p.conjunta <- df.tbl / totalObs)
(mp.FTHG <- rowSums(df.tbl) / totalObs) #Collection of marginal p for FTHG
(pm.FTAG <- colSums(df.tbl) /totalObs)  # Probabilidades marginales FTAG
(FTHG.mat <-matrix(pm.FTHG, nrow=9, ncol=7)) # Matriz de probabilidades marginales
(FTAG.mat <-matrix(pm.FTAG, nrow=9, ncol=7, byrow = T)) #Matrix of marginal p for FTAG
(pm.FTHG <- rowSums(df.tbl) / totalObs) # Probabilidades marginales FTHG
(pm.FTAG <- colSums(df.tbl) /totalObs)  # Probabilidades marginales FTAG
(FTHG.mat <-matrix(pm.FTHG, nrow=9, ncol=7)) # Matriz de probabilidades marginales
(FTAG.mat <-matrix(pm.FTAG, nrow=9, ncol=7, byrow = T)) #Matrix of marginal p for FTAG
# Tabla de cocientes p
(quotients.tbl <- p.conjunta / mp.product)
(mp.product <- as.table(FTHG.mat * FTAG.mat)) # Tabla contingencia del producto de probabilidades marginales
# Tabla de cocientes p
(quotients.tbl <- p.conjunta / mp.product)
# Tabla de cocientes p
sum((quotients.tbl <- p.conjunta / mp.product))
# 2. Mediante un procedimiento de boostrap, obtén más cocientes similares a los obtenidos
#    en la tabla del punto anterior. Esto para tener una idea de las distribuciones
#    de la cual vienen los cocientes en la tabla anterior.
#    Menciona en cuáles casos le parece razonable suponer que los cocientes de la tabla
#    en el punto 1, son iguales a 1 (en tal caso tendríamos independencia de las variables
#aleatorias X y Y).
setwd("../postwork04")
library(reshape2)
quotients.df <- melt(quotients.tbl)
(quotients.df <- melt(quotients.tbl))
hist(quotients.df$value)
ggplot(quotients.df, aes(values)) +
geom_histogram(bindwith=5) +
ggtitle("Histograma de cocientes") +
ylab("") +
xlab("Frecuencia") +
theme_light()
library(ggplot2)
ggplot(quotients.df, aes(values)) +
geom_histogram(bindwith=5) +
ggtitle("Histograma de cocientes") +
ylab("") +
xlab("Frecuencia") +
theme_light()
(quotients.df <- melt(quotients.tbl))
ggplot(quotients.df, aes(value)) +
geom_histogram(bindwith=5) +
ggtitle("Histograma de cocientes") +
ylab("") +
xlab("Frecuencia") +
theme_light()
ggplot(quotients.df, aes(value)) +
geom_histogram(bindwith=10) +
ggtitle("Histograma de cocientes") +
ylab("") +
xlab("Frecuencia") +
theme_light()
ggplot(quotients.df, aes(value)) +
geom_histogram(bindwith=100) +
ggtitle("Histograma de cocientes") +
ylab("Frecuencia") +
xlab("") +
theme_light()
ggplot(quotients.df, aes(value)) +
geom_histogram(bindwidth=100) +
ggtitle("Histograma de cocientes") +
ylab("Frecuencia") +
xlab("") +
theme_light()
ggplot(quotients.df, aes(value)) +
geom_histogram(binwidth=5) +
ggtitle("Histograma de cocientes") +
ylab("Frecuencia") +
xlab("") +
theme_light()
ggplot(quotients.df, aes(value)) +
geom_histogram(binwidth=10) +
ggtitle("Histograma de cocientes") +
ylab("Frecuencia") +
xlab("") +
theme_light()
ggplot(quotients.df, aes(value)) +
geom_histogram(binwidth=1) +
ggtitle("Histograma de cocientes") +
ylab("Frecuencia") +
xlab("") +
theme_light()
ggplot(quotients.df, aes(value)) +
geom_histogram(binwidth=0.1) +
ggtitle("Histograma de cocientes") +
ylab("Frecuencia") +
xlab("") +
theme_light()
ggplot(quotients.df, aes(value)) +
geom_histogram(binwidth=0.5) +
ggtitle("Histograma de cocientes") +
ylab("Frecuencia") +
xlab("") +
theme_light()
ggplot(quotients.df, aes(value)) +
geom_histogram(binwidth=0.25) +
ggtitle("Histograma de cocientes") +
ylab("Frecuencia") +
xlab("") +
theme_light()
ggplot(quotients.df, aes(value)) +
geom_histogram(binwidth=0.05) +
ggtitle("Histograma de cocientes") +
ylab("Frecuencia") +
xlab("") +
theme_light()
ggplot(quotients.df, aes(value)) +
geom_histogram(binwidth=0.5) +
ggtitle("Histograma de cocientes") +
ylab("Frecuencia") +
xlab("") +
theme_light()
ggplot(quotients.df, aes(value)) +
geom_histogram(binwidth=0.25) +
ggtitle("Histograma de cocientes") +
ylab("Frecuencia") +
xlab("") +
theme_light()
ggsave("histograma.png")
quotients.tbl
quotients.tbl[1:4,]
quotients.tbl[1:4,1:5]
quotients.tbl[1:4,1:6]
(quotients.df <- melt(quotients.tbl[1:4,1:6]))
ggplot(quotients.df, aes(value)) +
geom_histogram(binwidth=0.25) +
ggtitle("Histograma de cocientes") +
ylab("Frecuencia") +
xlab("") +
theme_light()
ggplot(quotients.df, aes(value)) +
geom_histogram(binwidth=0.1) +
ggtitle("Histograma de cocientes") +
ylab("Frecuencia") +
xlab("") +
theme_light()
ggplot(quotients.df, aes(value)) +
geom_histogram(binwidth=0.15) +
ggtitle("Histograma de cocientes") +
ylab("Frecuencia") +
xlab("") +
theme_light()
ggsave("histograma.png")
(quotients.df <- melt(quotients.tbl))  # omitiendo valores con ceros
(quotients.df <- quotients.df[quotients.df$value != 0])
(quotients.df <- quotients.df[quotients.df$value != 0], )
quotients.df$value != 0]
quotients.df$value != 0
(quotients.df <- melt(quotients.tbl))  # omitiendo valores con ceros
quotients.df$value != 0
quotients.df[quotients.df$value != 0]
quotients.df$value[quotients.df$value != 0]
quotients.df[quotients.df$value != 0]
quotients.df <- quotients.df[quotients.df$value != 0]
quotients.df <- quotients.df[quotients.df$value != 0]
quotients.df <- quotients.df[quotients.df$value != 0]
quotients.df$value <- quotients.df[quotients.df$value != 0]
q.df.clean <- quotients.df[quotients.df$value != 0].
q.df.clean <- quotients.df[quotients.df["value"] != 0]
(quotients.df <- melt(quotients.tbl))  # omitiendo valores con ceros
(quotients.df <- quotients.df[quotients.df["value"] != 0])
quotients.df["value"] != 0]
quotients.df["value"] != 0
(quotients.df <- melt(quotients.tbl))  # omitiendo valores con ceros
quotients.df["value"] != 0
quotients.df[quotients.df["value"] != 0]
(quotients.df <- melt(quotients.tbl))  # omitiendo valores con ceros
(quotients.df <- quotients.df[quotients.df$value != 0,])
ggplot(quotients.df, aes(value)) +
geom_histogram(binwidth=0.15) +
ggtitle("Histograma de cocientes") +
ylab("Frecuencia") +
xlab("") +
theme_light()
ggplot(quotients.df, aes(value)) +
geom_histogram(binwidth=0.25) +
ggtitle("Histograma de cocientes") +
ylab("Frecuencia") +
xlab("") +
theme_light()
ggplot(quotients.df, aes(value)) +
geom_histogram(binwidth=0.2) +
ggtitle("Histograma de cocientes") +
ylab("Frecuencia") +
xlab("") +
theme_light()
ggsave("histograma.png")
(quotients.df <- melt(quotients.tbl))  # omitiendo valores con ceros
(original.sample <- quotients.df[quotients.df$value != 0,])
ggplot(original.sample, aes(value)) +
geom_histogram(binwidth=0.2) +
ggtitle("Histograma de cocientes") +
ylab("Frecuencia") +
xlab("") +
theme_light()
(quotients.df <- quotients.df[quotients.df$value != 0,])
ggplot(quotients.df, aes(value)) +
geom_histogram(binwidth=0.2) +
ggtitle("Histograma de cocientes") +
ylab("Frecuencia") +
xlab("") +
theme_light()
(original.sample <- quotients.df$value)
